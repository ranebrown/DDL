/****************************************************************************
 *   $Id:: uart_main.c 4824 2010-09-07 18:47:51Z nxp21346                   $
 *   Project: NXP LPC11xx UART example
 *
 *   Description:
 *     This file contains UART test modules, main entry, to test UART APIs.
 *
 ****************************************************************************
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * products. This software is supplied "AS IS" without any warranties.
 * NXP Semiconductors assumes no responsibility or liability for the
 * use of the software, conveys no license or title under any patent,
 * copyright, or mask work right to the product. NXP Semiconductors
 * reserves the right to make changes in the software without
 * notification. NXP Semiconductors also make no representation or
 * warranty that such application will be suitable for the specified
 * use without further testing or modification.
****************************************************************************/
#include "driver_config.h"
#include "target_config.h"
#include "uart.h"
#include "gpio.h"
#include "timer32.h"
#include <stdio.h>

extern volatile uint32_t UARTCount;
extern volatile uint8_t UARTBuffer[BUFSIZE];

// frequency
volatile uint32_t slow = 100; 		// 1Hz
volatile uint32_t medium = 50;		// 2Hz
volatile uint32_t fast = 25; 		// 4Hz
volatile uint32_t veryFast = 12; 	// 8Hz

// duty cycle
volatile float d10 = .1; 	// 10%
volatile float d25 = .25;	// 25%
volatile float d55 = .50;	// 50%
volatile float d75 = .75;	// 75%
volatile float d90 = .9;	// 90%

volatile uint32_t ms = 0;



// executes each 10ms @ 60 MHz CPU Clock
void TIMER32_0_IRQHandler(void)
{
  if ( LPC_TMR32B0->IR & 0x01 ) {
	LPC_TMR32B0->IR = 1;				/* clear interrupt flag */
	ms++;
	if(slow) {
		GPIOSetValue(PORT2,7,0);
		if(ms < 50) {
			GPIOSetValue(PORT2,6,1);
		}
		else if(ms >= 50 && ms <=100) {
			GPIOSetValue(PORT2,6,0);
		}
		else {
			ms = 0;
		}
	}
	if(fast) {
		GPIOSetValue(PORT2,6,0);
		if(ms < 15) {
			GPIOSetValue(PORT2,7,1);
		}
		else if(ms >= 15 && ms <= 30) {
			GPIOSetValue(PORT2,7,0);
		}
		else {
			ms = 0;
		}
	}
  }
  if ( LPC_TMR32B0->IR & (0x1<<4) ) {
	LPC_TMR32B0->IR = 0x1<<4;			/* clear interrupt flag */
  }
  return;
}

int main (void) {
	// gpio config
	GPIOInit();
	GPIOSetDir(PORT2,6,1);
	GPIOSetDir(PORT2,7,1);
	GPIOSetDir(PORT2,8,1);
	GPIOSetValue(PORT2,6,0); // red
	GPIOSetValue(PORT2,7,0); // green
	GPIOSetValue(PORT2,8,0); // blue

	// timer 32 config with 10ms interrupt
	init_timer32(0, TIME_INTERVAL);
	enable_timer32(0);

	while(1) {
		int i;
		for(i=0;i<24000000;i++);
		slow = 0;
		fast = 1;
		for(i=0;i<24000000;i++);
		slow = 1;
		fast = 0;
//		GPIOSetValue(PORT2,6,1);
//		for(i=0;i<48000000/4;i++);
//		GPIOSetValue(PORT2,6,0);
//		for(i=0;i<48000000/4;i++);
//
//		GPIOSetValue(PORT2,7,1);
//		for(i=0;i<48000000/4;i++);
//		GPIOSetValue(PORT2,7,0);
//		for(i=0;i<48000000/4;i++);
//
//		GPIOSetValue(PORT2,8,1);
//		for(i=0;i<48000000/4;i++);
//		GPIOSetValue(PORT2,8,0);
//		for(i=0;i<48000000/4;i++);
//		__WFI();
	}
	  /* Basic chip initialization is taken care of in SystemInit() called
	   * from the startup code. SystemInit() and chip settings are defined
	   * in the CMSIS system_<part family>.c file.
	   */

  /* NVIC is installed inside UARTInit file. */
  UARTInit(9600);

#if MODEM_TEST
  ModemInit();
#endif

  while (1) 
  {				/* Loop forever */
	if ( UARTCount != 0 )
	{
	  LPC_UART->IER = IER_THRE | IER_RLS;			/* Disable RBR */
	  UARTSend( (uint8_t *)UARTBuffer, UARTCount );
	  UARTCount = 0;
	  LPC_UART->IER = IER_THRE | IER_RLS | IER_RBR;	/* Re-enable RBR */
	}
  }
}
